training.set
str(training.set)
#####Creating Decision Tree Model#####
tree <- rpart(Class ~ XB + XC + XD + XE + XF + XG + XH + XI + XJ + XK + XL + XM + XN + XO + XP + XQ + XR + XS + XT + XU,data=training.set,method="class",parms = list(split = 'information'), minsplit=2,minbucket=1)
#####Print summary of model#####
summary(tree)
######Plotting the decision tree######
par(mar=rep(0.1,4))
plot(tree,uniform=T,compress = T)
text(tree)
######Pruning the tree#####
plotcp(tree)
printcp(tree)
prunedTree <- prune(tree, cp=(tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"]))
par(mar=rep(0.1,4))
plot(prunedTree,uniform=T,compress = T)
text(prunedTree)
#####Testing the Model using test set#####
str(test.set)
prediction <- predict(prunedTree,test.set,type = "class")
predTable <- table(prediction,test.set$Class)
#####Calculating accuracy#####
accuracy <- sum(diag(predTable))/sum(predTable)
accuracy*100
}
training.set = read.csv("processed.cleveland.data")
test.set = read.csv("test_set.csv")
DecisionTreeModel(training.set, test.set)
tree2<-ctree(class~ .,data=train)
})
output$image2=renderImage({
list(src="tree_id3.png",contentType="image/png")
},deleteFile = FALSE)
output$tableC=renderTable({
paste0(tab1)
})
output$p1 = renderPlot(
{
plot(tree, main="Tree for C4.5")
}
)
output$p2 = renderPlot(
{
plot(tree1, main="Tree for id3")
}
)
})
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
runApp('ppsd.R')
library(shiny); runApp('ppsd.R')
runApp('ppsd.R')
library(shiny); runApp('ppsd.R')
runApp('ppsd.R')
library(shiny); runApp('ppsd.R')
library(shiny); runApp('ppsd.R')
shiny::runApp('C:/Users/Umair/Desktop/1b7b52e03ba5d81d5966-c30084195d462d17bcd7df6f3aa09b616b9bfb13')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(party)
png(file="tree.png")
png(file="tree_id3.png")
ui<-dashboardPage(
dashboardHeader(title = "UCI Machine Learning Repository"),
dashboardSidebar(
sidebarMenu(
menuItem("RandomForest Algorithm", tabName = "RandomForest", icon = icon("arrow")),
menuItem("DecisionTree ID3 ", tabName = "DecisionTree_ID3", icon = icon("method")),
menuItem("DecisionTree c45", tabName = "DecisionTree_c45", icon = icon("method"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "RandomForest",
fluidRow(
box(plotOutput("plot1", height = 200)),
dataTableOutput("tableA"),
imageOutput("image")
#fluidRow(
# imageOutput("image")
#)
)
),
# Second tab content
tabItem(tabName = "DecisionTree_ID3",
h2("DecisionTree_ID3"),
fluidRow( dataTableOutput("tableB")),
mainPanel(plotOutput(outputId="p2")),
imageOutput("image2")
),
tabItem(tabName = "DecisionTree_c45",
h2("Widgets tab content"),
mainPanel(plotOutput(outputId = "p1")),
fluidRow(tableOutput("tableC"))
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$p2 = renderPlot(
{
plot(tree1, main="Tree for id3")
}
output$tableB=renderDataTable({
DecisionTreeModel <- function(training.set,test.set) {
#####Extract Training Data#####
training.set
str(training.set)
#####Creating Decision Tree Model#####
tree <- rpart(Class ~ XB + XC + XD + XE + XF + XG + XH + XI + XJ +
XK + XL + XM + XN + XO + XP + XQ + XR + XS + XT + XU,
data=training.set,method="class",parms = list(split = 'information'),
minsplit=2,minbucket=1)
#####Print summary of model#####
summary(tree)
######Plotting the decision tree######
par(mar=rep(0.1,4))
plot(tree,uniform=T,compress = T)
text(tree)
######Pruning the tree#####
plotcp(tree)
printcp(tree)
prunedTree <- prune(tree,
cp=(tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"]))
par(mar=rep(0.1,4))
plot(prunedTree,uniform=T,compress = T)
text(prunedTree)
#####Testing the Model using test set#####
str(test.set)
prediction <- predict(prunedTree,test.set,type = "class")
predTable <- table(prediction,test.set$Class)
#####Calculating accuracy#####
accuracy <- sum(diag(predTable))/sum(predTable)
accuracy*100
}
training.set = read.csv("processed.cleveland.data")
test.set = read.csv("processed.cleveland.data")
DecisionTreeModel(training.set, test.set)
tree2<-ctree(class~ .,data=train)
})
output$image2=renderImage({
list(src="tree_id3.png",contentType="image/png")
},
deleteFile = FALSE)
output$tableC=renderTable({
paste0(tab1)
})
output$p1 = renderPlot(
{
plot(tree, main="Tree for C4.5")
}
)
output$p2 = renderPlot(
{
plot(tree1, main="Tree for id3")
}
)
})
output$tableB=renderDataTable({
DecisionTreeModel <- function(training.set,test.set) {
#####Extract Training Data#####
training.set
str(training.set)
#####Creating Decision Tree Model#####
tree <- rpart(Class ~ XB + XC + XD + XE + XF + XG + XH + XI + XJ +
XK + XL + XM + XN + XO + XP + XQ + XR + XS + XT + XU,
data=training.set,method="class",parms = list(split = 'information'),
minsplit=2,minbucket=1)
#####Print summary of model#####
summary(tree)
######Plotting the decision tree######
par(mar=rep(0.1,4))
plot(tree,uniform=T,compress = T)
text(tree)
######Pruning the tree#####
plotcp(tree)
printcp(tree)
prunedTree <- prune(tree,
cp=(tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"]))
par(mar=rep(0.1,4))
plot(prunedTree,uniform=T,compress = T)
text(prunedTree)
#####Testing the Model using test set#####
str(test.set)
prediction <- predict(prunedTree,test.set,type = "class")
predTable <- table(prediction,test.set$Class)
#####Calculating accuracy#####
accuracy <- sum(diag(predTable))/sum(predTable)
accuracy*100
}
training.set = read.csv("processed.cleveland.data")
test.set = read.csv("processed.cleveland.data")
DecisionTreeModel(training.set, test.set)
tree2<-ctree(class~ .,data=train)
})
output$image2=renderImage({
list(src="tree_id3.png",contentType="image/png")
},
deleteFile = FALSE)
output$tableC=renderTable({
paste0(tab1)
})
output$p1 = renderPlot(
{
plot(tree, main="Tree for C4.5")
}
)
output$p2 = renderPlot(
{
plot(tree1, main="Tree for id3")
}
)
})
runApp()
shiny::runApp()
shiny::runApp()
runApp()
plot(tree)
library(shiny)
library(shinydashboard)
library(DT)
library(party)
library(randomForest)
library(caTools)
library(rpart)
library(rpart.plot)
data=read.csv("processed.cleveland.data")
names(data)<-c("age", "sex", "cp", "trestbps", "choi",
"fbs", "restecg", "thalach", "exang", "oldpeak",
"slope", "ca", "thai", "num")
data$num[data$num > 1]<-1
data <- transform(
data,
age=as.integer(age),
sex=as.factor(sex),
cp=as.factor(cp),
trestbps=as.integer(trestbps),
choi=as.integer(choi),
fbs=as.factor(fbs),
restecg=as.factor(restecg),
thalach=as.integer(thalach),
exang=as.factor(exang),
oldpeak=as.numeric(oldpeak),
slope=as.factor(slope),
ca=as.factor(ca),
thai=as.factor(thai),
num=as.factor(num)
)
tree = ctree(num ~ ., data=data)
tab1 = table(predict(tree),data$num)
#train<=subset(data)
shinyServer(function(input, output)
{
output$p1 = renderPlot({
plot(input$v1,input$v2)
})
output$table =renderDataTable({
file =read.csv("processed.cleveland.data")
file
datatable(file,
rownames=T,
filter="top",
h3("All students Information"),
options=list(pageLength=10)
)
})
output$tableA=renderDataTable({
data=read.csv("processed.cleveland.data")
# val$num[val$num > 1]<-1
names(data)<-c("age", "sex", "cp", "trestbps", "choi",
"fbs", "restecg", "thalach", "exang", "oldpeak",
"slope", "ca", "thai", "num")
data$num[data$num > 1]<-1
data <- transform(
data,
age=as.integer(age),
sex=as.factor(sex),
cp=as.factor(cp),
trestbps=as.integer(trestbps),
choi=as.integer(choi),
fbs=as.factor(fbs),
restecg=as.factor(restecg),
thalach=as.integer(thalach),
exang=as.factor(exang),
oldpeak=as.numeric(oldpeak),
slope=as.factor(slope),
ca=as.factor(ca),
thai=as.factor(thai),
num=as.factor(num)
)
summary(data)
png(filename = "tree.png")
tree<-randomForest( num~ .,data=data)
#tree<-ctree( num~ .,data=data)
plot(tree)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(party)
png(file="tree.png")
png(file="tree_id3.png")
ui<-dashboardPage(skin = "purple",
dashboardHeader(title = "UCI Machine Learning Repository",dropdownMenu(type = "messages",
messageItem(
from = "New Patient",
message = "How do I register?",
icon = icon("question"),
time = "13:45"
),
messageItem(
from = "Support",
message = "The new server is ready.",
icon = icon("life-ring"),
time = "2014-12-01"
)
)),
dashboardSidebar(
sidebarMenu(
menuItem("RandomForest ", tabName = "RandomForest", icon = icon("random")),
menuItem("DecisionTree c45", tabName = "DecisionTree_c45", icon = icon("heartbeat")),
menuItem("DecisionTree ID3 ", tabName = "DecisionTree_ID3", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "RandomForest",
h2("Random Forest Algorithm"),
fluidRow(
box("This page will show the working of Random Forest algorithm", br(),br(), "By using processed.cleveland data",
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height = 100,width = 400)),
dataTableOutput("tableA"),
imageOutput("image", height = 5,width = 5)
#fluidRow(
#imageOutput("image")
#)
)
),
# 2 tab content
tabItem(tabName = "DecisionTree_c45",
h2("DecisionTree_c45"),
mainPanel(plotOutput(outputId = "p1"),height = 100,width = 100),
fluidRow(tableOutput("tableC"))
),
# 3 tab content
tabItem(tabName = "DecisionTree_ID3",
h2("DecisionTree_ID3"),
##fluidRow( dataTableOutput("tableB")),
mainPanel(plotOutput(outputId="p2"),height = 100,width = 100),
fluidRow( dataTableOutput("tableB")),
imageOutput("image2",height = 1,width = 1)
)
)
)
)
library(shiny)
library(shinydashboard)
library(DT)
library(party)
png(file="tree.png")
png(file="tree_id3.png")
ui<-dashboardPage(skin = "purple",
dashboardHeader(title = "UCI Machine Learning Repository",dropdownMenu(type = "messages",
messageItem(
from = "New Patient",
message = "How do I register?",
icon = icon("question"),
time = "13:45"
),
messageItem(
from = "Support",
message = "The new server is ready.",
icon = icon("life-ring"),
time = "2014-12-01"
)
)),
dashboardSidebar(
sidebarMenu(
menuItem("RandomForest ", tabName = "RandomForest", icon = icon("random")),
menuItem("DecisionTree c45", tabName = "DecisionTree_c45", icon = icon("heartbeat")),
menuItem("DecisionTree ID3 ", tabName = "DecisionTree_ID3", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "RandomForest",
h2("Random Forest Algorithm"),
fluidRow(
box("This page will show the working of Random Forest algorithm", br(),br(), "By using processed.cleveland data",
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height = 100,width = 400)),
dataTableOutput("tableA"),
imageOutput("image", height = 5,width = 5)
#fluidRow(
#imageOutput("image")
#)
)
),
# 2 tab content
tabItem(tabName = "DecisionTree_c45",
h2("DecisionTree_c45"),
mainPanel(plotOutput(outputId = "p1"),height = 100,width = 100),
fluidRow(tableOutput("tableC"))
),
# 3 tab content
tabItem(tabName = "DecisionTree_ID3",
h2("DecisionTree_ID3"),
##fluidRow( dataTableOutput("tableB")),
mainPanel(plotOutput(outputId="p2"),height = 100,width = 100),
fluidRow( dataTableOutput("tableB")),
imageOutput("image2",height = 1,width = 1)
)
)
)
)
library(shiny)
library(shinydashboard)
library(DT)
library(party)
png(file="tree.png")
png(file="tree_id3.png")
ui<-dashboardPage(skin = "purple",
dashboardHeader(title = "UCI Machine Learning Repository",dropdownMenu(type = "messages",
messageItem(
from = "New Patient",
message = "How do I register?",
icon = icon("question"),
time = "13:45"
),
messageItem(
from = "Support",
message = "The new server is ready.",
icon = icon("life-ring"),
time = "2014-12-01"
)
)),
dashboardSidebar(
sidebarMenu(
menuItem("RandomForest ", tabName = "RandomForest", icon = icon("random")),
menuItem("DecisionTree c45", tabName = "DecisionTree_c45", icon = icon("heartbeat")),
menuItem("DecisionTree ID3 ", tabName = "DecisionTree_ID3", icon = icon("tree"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "RandomForest",
h2("Random Forest Algorithm"),
fluidRow(
box("This page will show the working of Random Forest algorithm", br(),br(), "By using processed.cleveland data",
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height = 100,width = 400)),
dataTableOutput("tableA"),
imageOutput("image", height = 5,width = 5)
#fluidRow(
#imageOutput("image")
#)
)
),
# 2 tab content
tabItem(tabName = "DecisionTree_c45",
h2("DecisionTree_c45"),
mainPanel(plotOutput(outputId = "p1"),height = 100,width = 100),
fluidRow(tableOutput("tableC"))
),
# 3 tab content
tabItem(tabName = "DecisionTree_ID3",
h2("DecisionTree_ID3"),
##fluidRow( dataTableOutput("tableB")),
mainPanel(plotOutput(outputId="p2"),height = 100,width = 100),
fluidRow( dataTableOutput("tableB")),
imageOutput("image2",height = 1,width = 1)
)
)
)
)
